1. 소수란
: 1과 자기 자신을 제외한 자연수로 나누어 떨어지지 않는 수

2. 기본 알고리즘
def is_prime_number(x):
    for i in range(2, x):
        if x % i == 0:
            return False
    return True

3. 시간 복잡도
한개의 숫자에 대한 소수를 찾는 시간 복잡도는 O(X)

4. 약수의 성질
가운데 약수(제곱근)까지만 확인 하면 된다.
ex) 16이면 4까지만 확인하면된다. 왜냐하면 2로 나누어 떨어진다는 것은 8로도 나누어 떨어진다는것과 같기 때문이다.

5. 개선된 알고리즘1
def is_prime_number(x):
    for i in range(2, int(math.sqrt(x)) + 1):
        if x % i == 0:
            return False
    return True

6. 개선된 알고리즘1의 시간복잡도
한개의 숫자에 대한 소수를 찾는 시간 복잡도는 O(X^(1/2))

7. 다수의 소수 판별
: 특정한 수의 범위 안에 존재하는 모든 소수를 찾아야 할 때
> 에라토스테네스의 체 알고리즘 사용

8. 에라토스테네스의 체 알고리즘 동작과정
(1) 2부터 N의 제곱근까지 모든 자연수를 나열
반복
(2) 남은 수중 아직 처리하지 않은 가장 작은 수 i를 찾는다.
(3) 남은 수 중에서 i의 배수를 모두 제거(i는 제거하지 않는다. i는 소수)

9. 에라토스테네스 구현 코드
import math

n = 1000 # 1000까지 소수 판별
array = [True for i in range(n+1)]

for i in range(2, int(math.sqrt(n)) + 1):
    if array[i] == true:
        j = 2
        while i * j <= n:
            array[i * j] = False
            j += 1

for i in range(2, n + 1):
    if array[i]:
        print(i, end=' ')

10. 에라토스테네스 시간 복잡도
: O(Nlog(logN))

11. 단점
메모리가 많이 필요하다.