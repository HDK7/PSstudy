1.
모든 노드에서 다른 모드 노드까지의 최단 경로를 모두 계산
다익스트라와 공통점 : 거쳐 가는 노드를 기준으로 알고리즘을 수행
다익스트라와 차이점 : 매 단계마다 방문하지 않은 노드 중 최단 거리를 갖는 노드를 찾는 과정이 필요 없음, 음의 가중치도 가능

2차원 테이블에 최단 거리 정보를 저장
DP 유형에 속합니다.

2. 플로이드 워셜 알고리즘
D(ab) = min(D(ab), D(ab) + D(kb))

# 나동빈님 코드
INF = int(1e9)

n = int(input()) # 노드 개수
m = int(input()) # 간선 개수
graph = [[INF] * (n + 1) ofr _ in range(n + 1)]

for a in range(1, n + 1):
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a][b] = c

for k in range(1, n + 1):
    for a i range(1, n + 1):
        for b in range(1, n + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

#결과 출력
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if graph[a][b] == INF:
            print("INFINITY", end = " ")
        else:
            print(graph[a][b], end = " ")
    print()


3. 시간 복잡도
O(N^3)

4. 원리
어떻게 이게 동작할 수 있는지 잘 이해가 가지 않았다.
대략적으로 내가 추측해 보건대
1 - 2 - 3 - 4 를 거친 경로가 최단 경로일 경우
k = 3일 때 2 - 3 - 4 의 최단경로 값이 계산되고
          1 - 3 - 4 의 최단경로 값이 계산된다.
반대로 1 - 3 -4 먼저 계산된다 하더라도
k  = 2 일때 1 - 2 - 4 가 계산되면서 1- 2- 3- 4 를 거친 최단 경로의 값이 계산되게 되는것 같다.
