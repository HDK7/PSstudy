1. 최단경로 를 찾는 알고리즘
일반적으로 문제들을 노드와 간선으로 표현한다.

2. 다익스트라 알고리즘
특정한 노드에서 다른 모든 노드로 가는 최단 경로를 계산한다.
** 음의 간선이 없을 때 정상적으로 동작한다.
그리디 알고리즘의 일종이다. ( + DP )
- 매상황에서 가장 비용이 적은 노드를 선택하는 것을 반복

3. 동작 과정
1) 출발 노드를 설정
2) 최단 거리 테이블을 초기화 (타인은 무한대 자기자신은 0)
-이후 반복 ( DP )
3) 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택 - 그리디
4) 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신

- 처음엔 이해가 안갔는데
  방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드
  - 이 노드는 무조건 가장 짧은 거리를 가지고 있기 때문에
    다른 곳을 거치면 멀수밖에 없다. 그래서 최단 거리이다.
    최단 거리를 가진 노드에서 다시 다른노드의 최단거리를 찾으면 그것이 또 최단거리이다.


# 나동빈님 코드
import sys
input = sys.stdin.readline
INF = int(1e9) #무한을 의미하는 10억

n, m = map(int, input().split()) #노드 개수, 간선 개수
start = int(input()) # 시작 노드
graph = [[] for i in range(n+1)] # 노드에 연결디어 있는 노드
visited = [False] * (n + 1) # 방문 여부
distance = [INF] * (n + 1) # 최단거리 테이블 초기화

#간선 정보 받기
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c)) # a에서 b로 가는 비용이 c다

# 방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    min_value = INF
    index = 0
    for i in ragne(1, n+1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index

def dijkstra(start):
    # 시작 노드 초기화
    distance[start] = 0
    visited[start] = True
    for j in graph[start]:
        distance[j[0]] = j[1]
    # 시작 노드를 제외한 전체  n - 1 개의 노드에 대해 반복
    for i in range(n-1):
        # 현재 최단 거리가 가장 짧은 노드를 꺼내서, 방문 처리
        now = get_smallest_node()
        visited[now] = True
        # 현재 노드와 연결된 다른 노드를 확인
        for j in graph[now]:
            cost = distance[now] + j[1]
            # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost

dijkstra(start)

for i in range(1, n + 1):
    if distance[i] == INF:
        print("INFINITY")
    else:
        print(distance[i])


4. 시간 복잡도
O(N^2) 이므로 5000개 이하면 가능하다.
하지만 그 이상이라면?
우선순위 큐를 이용한다.
우선순위 큐 : 우선순위가 가장 높은 데이터를 먼저 삭제하는 자료구조 이다.
우선순위 큐 구현 방식 / 삽입 / 특정 값을 찾아서 꺼낼때
리스트               O(1)    O(N)
힙                  O(logN) O(logN)


5. 힙 라이브러리 사용 예제
최소 힙
- heap에 넣었다
import heapq

def heapsort(iterable):
    h = []
    result = []

    for value in iterable:
        heapq.heappush(h, value)
    for i in rage(len(h)):
        result.append(heap.heappop(h))
    return result

result = heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
print(result) # 0 1 2 3 4 5 6 7 8 9

최대 힙
import heapq

def heapsort(iterable):
    h = []
    result = []

    for value in iterable:
        heapq.heappush(h, -value)
    for i in rage(len(h)):
        result.append(-heap.heappop(h))
    return result

result = heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
print(result) # 9 8 7 6 5 4 3 2 1 0

6. 다익스트라 개선
가장 짧은 노드를 선택할 때 힙 자료구조를 이용합니다.
- 반복 (처음에 시작노드를 우선순위 큐에 넣고 시작한다)
(1) 최단 거리를 가진 노드를 꺼낸다
(2) 꺼낸 노드와 관련된 노드들이 꺼낸 노드를 거쳐 갔을 때 최소값이 되는지 확인한다.
(3) 최단 거리로 갱신된 값만 (거리, 노드)를 우선 순위 큐로 삽입한다.

# 나동빈님 코드
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9) #무한을 의미하는 10억

n, m = map(int, input().split()) #노드 개수, 간선 개수
start = int(input()) # 시작 노드
graph = [[] for i in range(n+1)] # 노드에 연결디어 있는 노드
distance = [INF] * (n + 1) # 최단거리 테이블 초기화

#간선 정보 받기
for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b,c)) # a에서 b로 가는 비용이 c다


def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:
        dist, now = heapq.heapqpop(q)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost <distance[i[0]]:
            distance[i[0]] = cost
            heapq.heappush(q, (cost, i[0]))



dijkstra(start)

for i in range(1, n + 1):
    if distance[i] == INF:
        print("INFINITY")
    else:
        print(distance[i])