1. 개념
: 그래프에서 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프

2. 최소 신장 트리
주어진 간선 비용들에서 최소한의 간선 비용으로 전체를 연결할 수 있는 경우

3. 크루스칼 알고리즘
대표적인 최소 신장 트리 알고리즘
(1) 간선 데이터를 비용에 따라 오름차순 정렬 (작은 것 먼저)
(2) 간선을 하나씩 확인하며 현재 간선이 사이클을 발생 시키는지 확인.(같은 집합에 포함되어 있는지)
 - 사이클 발생 - 포함X
 - 사이클 발생X - 포함O

4. 코드 구현

# 소속 집합 찾기 (루트 노드)
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

# 집합 합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

# 노드의 개수와 간선 개수 입력 받기
v, e = map(int, input().split())
parent = [0] * (v + 1)

# 변수 선언
edges = []
result = 0

# 부모 테이블 초기화
for i in range(1, v + 1)
    parent[i] = i

# 간선 정보 입력받기
for _ in range(e):
    a, b, cost = map(int, input().split())
    edges.append((cost, a, b))

# 간선 비용순 정렬
edges.sort()

#여기가 알고리즘
for edges in edges:
    cost, a, b = edge
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost

print(result)

5. 시간 복잡도
간선의 개수가 E개 일때 O(ElogE)
- 정렬을 수행하는 부분이 가장 오래걸린다.