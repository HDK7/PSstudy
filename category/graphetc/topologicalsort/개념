1. 개념
사이클이 없는 방향 그래프(DAG)의 모든 노드를 방향성에 거스르지 않고 순서대로 나열 하는 것
예시) 선수 과목을 고려한 학습 순서

2. 진입차수와 진출차수
진입차수 : 특정 노드로 들어오는 간선 개수
진출차수 : 특정 노드에서 나가는 간선의 개수

3. 큐를 이용하는 위상 정렬 알고리즘
(1) 진입차수가 0인 모든 노드를 큐에 넣는다.
반복
(2) 큐에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거한다.
(3) 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.

4. 전제조건
'사이클이 없어야 한다.'
'방향 그래프여야 한다'

5. 특징
위상정렬은 여러가지 답이 존재할 수 있다.
- 한 단계에서 큐에 새롭게 들어가는 원소가 2개이상이면 순서가 바뀔 수 있다.
모든 원소가 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단할 수 있다.

6. 구현 코드
from collections import deque

# 노드, 간선 개수
v, e = map(int, input().split())

# 모든 노드 집입 차수 초기화
indegree = [0] * (v + 1)

# 리스트 초기화
graph = [[] for i in range(v + 1)]

# 방향 그래프 간선 정보 입력 받기
fir _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b) # A에서 B로 이동 가능
    indegree[b] += 1 # 전입차수 + 1

# 위상 정렬 함수

def topology_sort():
    result = []
    q = deque()

    # 진입차수가 0 인 노드를 큐에 넣어준다
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    # 반복
    while q:
        now = q.popleft()
        result.append(now)
        # 해당 원소와 연결된 노드들 진입차수 -1
        for i in graph[now]:
            indegree[i] -= 1

            # 새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)

    # 위상정렬을 수행한 결과 출력
    for i in result:
        print(i, end=' ')

topology_sort()



