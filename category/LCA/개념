1. 최소 공통 조상 (Lowest Common Ancestor)

2. 기본적인 알고리즘
(1) 모든 노드의 깊이 계산(DFS)
(2) 두 노드의 깊이를 확인
  (1) 두 노드의 깊이가 동일할때까지 거슬러 올라간다
  (2) 이후 부모가 같아질 때까지 반복적으로 부모 방향으로 거슬러 올라간다.
(3) 모든 LCA(a,b) 연산에 대하여 2번의 과정을 반복한다.

3. 기본 알고리즘 구현 코드
import sys
sys.setrecursionlimit(int(1e5))
n = int(input())

parent = [0] * (n + 1)
d = [0] * (n + 1)
c = [0] * (n + 1)
graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 루트 노드부터 모든 노드의 깊이를 구한다.
# x는 루트노드
def dfs(x, depth):
    c[x] = True
    d[x] = depth
    for y in graph[x]:
        # 이미 깊이를 구했다면 넘긴다
        if c[y]:
            continue
        parent[y] = x
        dfs(y, depth + 1)

# A와 B의 최소 공통 조상을 찾는 함수
def lca(a, b):
    while d[a] != d[b]:
        if d[a] > d[b]:
                a = parent[a]
            else:
                b = parent[b]

        while a != b:
            a = parent[a]
            b = parent[b]
        return a

dfs(1, 0) # 루트 노드는 1번 노드

m = int(input())

for i in range(m):
    a, b = map(int, input().split())
    print(lca(a,b))


4. 기본 알고리즘 시간 복잡도
최악의 경우 O(N)
공통 조상노드 M개를 찾아야 할 때 시간 복잡도는 O(NM)

5. 개선된 알고리즘
15칸 거슬러 올라가야 할 경우 : 8칸 + 4칸 + 2칸 + 1칸
O(logN)의 시간복잡도를 보장할 수 있다.
각 노드에 대해 메모리를 사용해 2^i 번째 부모에 대한 정보를 기록한다.(DP 활용)

공통 조상노드 M개를 찾아야 할 때 시간 복잡도는 O(MlogN)

6. 구현 코드
import sys
input = sys.stdin.readline
sys.setrecursionlimit(int(1e5))
LOG = 21
# 2^20 = 1,000,000

n = int(input())
parent = [[0] * LOG for _ in range(n + 1)]
d = [0] * (n + 1)
c = [0] * (n + 1)
graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 루트 노드부터 모든 노드의 깊이를 구한다.
# x는 루트노드
def dfs(x, depth):
    c[x] = True
    d[x] = depth
    for y in graph[x]:
        # 이미 깊이를 구했다면 넘긴다
        if c[y]:
            continue
        parent[y] = x
        dfs(y, depth + 1)

# 전체 부모 관계를 설정하는 함수
def set_parent():
    dfs(1, 0)
    for i in range(1, LOG):
        for j in range(1, n + 1):
            parent[j][i] = parent[ parent[j][i - 1] ][i - 1]


# A와 B의 최소 공통 조상을 찾는 함수
def lca(a, b):
    if d[a] > d[b]:
        a, b = b, a

    # depth 맞추기
    for i in range(LOG - 1, -1, -1):
        if d[b] - d[a] >= (1 << i):
            b = parent[b][i]

    # 같으면 리턴
    if a == b:
        return a;

    # 부모가 같아지도록
    for i in range(LOG - 1, -1, -1):
        if parent[a][i] != parent[b][i]:
            a = parent[a][i]
            b = parent[b][i]

    return parent[a][0]

set_parent()

m = int(input())

for i in range(m):
    a, b = map(int, input().split())
    print(lca(a, b))


