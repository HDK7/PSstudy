1. 구간 합
1, 2, 3, 4, 5 배열이 있고
3번째 수를 6으로 바꾸고 2~5 번째 수의 합을 구하라고 하면 17ㅇ ㅣ출력된다.
이런식으로 데이터가 변경되는 경우에 유용하다.

2. BIT(Binary Indexed Tree) or fenwick tree 라고 한다
어떤 수 K 의 and bit 연산은 K & K 를 해서 나오는 숫자는 맨 처음 등장하는 1 의 값을 가진 bit 이다.
7     0000 0111
-7    1111 1001
7&-7  0000 0001

3. 특정 값을 변경할 때 : 0이 아닌 마지막 비트만큼 더하면서 구간들의 값을 변경

4. 누적합 구하기 : 0이 아닌 마지막 비트만큼 빼면서 구간들의 값의 합 계산

** 영상을 보는 것이 이해가 쉽다.

5. 구현 코드
import sys
input = sys.stdin.readline

# 데이터 개수(n), 변경 횟수(m), 구간 합 계산 횟수(k)
n, m, k = map(int, input().split())

arr = [0] * (n + 1)
tree = [0] * (n + 1)

# i번째 수까지 누적합을 계산
def prefix_sum(i):
    result = 0
    while i > 0:
        result += tree[i]
        i -= (i & -i)
    return result

# i번째 수를 dif만큼 더하는 함수
def update(i, dif):
    while i <= n:
        tree[i] += dif
        i += (i&-i)

# start부터 end까지의 구간 합을 계산하는 함수
def interval_sum(start, end):
    return prefix_sum(end) - prefix_sum(start - 1)

# 입력값 주입
for i in range(1, n + 1):
    x = int(input())
    arr [i] = x
    update(i, x)

for i in range(m + k):
    a, b, c = map(int, input().split())
    # update 연산인 경우
    if a == 1:
        update(b, c - arr[b])
        arr[b] = c
    # 구간 합 연산인 경우
    else:
        print(interval_sum(b, c))