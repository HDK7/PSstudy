1.
순차 탐색 : 앞에서부터 하나씩 확인
이진 탐색 : 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색

2.
시간 복잡도 : O(logN)

3.
코드 구현

def binary_search(array, target, start, end):
    if start > end:
        return None

    mid = (start + end) // 2

    if array[mid] == target:
        return mid

    elif array[mid] > tartget:
        return binaray_search(array, tartget, start, mid - 1)
    else:
        return binaray_search(array, tartget, mid + 1, end)

n, tartget = list(map(int, input(). split()))
array = list(map(int, input().split()))

result = binary_search(array, target, 0, n - 1)

if result == None:
    print("원소가 없음")
else:
    print(result + 1)

4. 이진 탐색 라이브러리
bisect_left(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환
bisect_right(a, x) : 정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환
a 가 [1, 2, 4, 4, 8]일경우
bisect_left(a, 4) 는 2와 4 사이 index인 2 결과 반환
bisect_right(a, 4) 는 4와 8 사이 index인 4 결과 반환

a와 b 사이 값의 데이터 개수
bisect_left(a, 4) - bisect_right(b, 4)


5. 파라메트릭 서치
최적화 문제를 결정 문제로 바꾸어 해결하는 기법
특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
유형문제1 참고

유형문제2 같은경우 팀노트로 만들어 놓는걸 추천한다.













