1. 개념
: 계층적인 구조를 표현할 때 사용

2. 용어
루트 노드 : 부모가 없는 최상위 노드
단말 노드 : 자식이 없는 노드
크기 : 모든 노드 개수
깊이 : 루트 노트부터의 거리
높이 : 깊이 중 최댓값
차수 : 자식방향 간선 개수
tip) 크기가 N 일때 총 간선의 개수는 N - 1 개

3. 이진 탐색 트리
: 이진 탐색이 동작할 수 있도록 고안된 효율적인 탐색이 가능한 자료구조
이진 탐색 트리 특징: 왼쪽 자식노드 < 부모노드 < 오른쪽 자식 노드

4. 데이터 조회 과정
(1) 루트 노드부터 방문하여 탐색.
(2) 현재 노드와 값을 비교
(3) 찾는 원소보다 값이 더 크면 오른쪽 자식 노드 방문, 아니면 왼쪽 자식 노드, 같으면 종료.

5. 트리 순회 방법
(1) 전위 순회: 루트, 왼쪽 자식, 오른쪽 자식 순서
(2) 중위 순회: 왼쪽 자식, 루트, 오른쪽 자식 순서
(3) 후위 순회: 왼쪽 자식, 오른쪽 자식, 루트
예시)
        A
    B       C
   D  E    F  G
전위 순회 : A B D E C F G
중위 순회 : D B E A F C G
후위 순회 : D E B F G C A

6. 구현 코드
class Node:
    def _init_(self, data, left_node, right_node):
        self.data = data
        self.left_node = left_node
        self.right_node = right_node

# 전위 순회
def pre_order(node):
    print(node.data, end=' ')
    if node.left_node != None:
        pre_order(tree[node.left_node])
    if node.right_node != None:
        pre_order(tree[node.right_node])

# 중위 순회
def in_order(node):
    if node.left_node != None:
        in_order(tree[node.left_node])
    print(node.data, end=' ')
    if node.right_node != None:
        in_order(tree[node.right_node])

# 후위 순회
def post_order(node):
    if node.left_node != None:
        post_order(tree[node.left_node])
    if node.right_node != None:
        post_order(tree[node.right_node])
    print(node.data, end=' ')

n = int(input())
tree = {}

for i in range(n):
    data, left_node, right_node = input().split()
    if left_node == "None":
        left_node = None
    if right_node == "None":
        right_node = None
    tree[data] = Node(data, left_node, right_node)

pre_order(tree['A'])
print()
in_order(tree['A'])
print()
post_order(tree['A'])