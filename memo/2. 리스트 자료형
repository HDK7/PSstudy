0. 리스트 자료형
: java의 List와 비슷.

1. 초기화
(1) list()
(2) []

2. 인덱스를 이용한 원소 접근
a = [1,2,3,4]
print(a[3])
a[3] = 5

3. 값이 있는 초기화
n = 10
a = [0] * n

4. 음의 정수 인덱스 접근
a[-1] 은 가장 뒤
a[-3] 은 뒤에서 세번 째

5. 슬라이싱
* 끝 인덱스는 실제 인덱스보다 1을 더 크게 설정
a[1:4] 은 두번째부터 네번째 원소까지 가져온다 (1이상 4미만)

6. 리스트 컴프리헨션
# 0부터 9까지의 수를 포함하는 리스트
array = [i for i in range(10)]
# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1 ]
# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
# tip) 2차원 리스트를 초기화 할때 효과적이다.
array = [[0] * m for _ in range(n)]
array = [[0] * m] * n  // 이것은 n개의 [0] * m 객체가 모두 같은곳을 바라보게 된다. 그래서 값을 공유하므로 이렇게 하면 안된다.
# 언더바(_)를 이용해 변수를 무시할 수 있다.
for _ in range(5):
    print("aa")

7. 함수
list.apeend(값) O(1)
list.sort() O(NlogN)
list.sort(reverse=True)
insert(위치, 값) O(N)
list.count(특정 값) O(N)  # 특정 값의 개수를 센다
list.remove(특정 값) O(N) # 특정 값 삭제. 여러개일 경우 한개만 제거

8. 특정 값들 모두 제거
:집합자료형 {} 를 활용
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}
result = [i for i in a if i not in remove_set]
실행결과
[1, 2, 4]

